{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js","music/sounds_of_city.mp3"],"names":["module","exports","__webpack_require__","p","library","add","faPlay","faPause","placeholders","defaultTask","headerTaskTimer","defaultTaskTime","defaultBreakTime","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","taskInputRef","React","createRef","countdownEvent","bind","assertThisInitialized","timer","state","taskEdit","taskValue","timerTypeValue","timeToPercent","playAlarm","alarm","Audio","mp3_file","taskTime","breakTime","countdownTime","timerSwitch","timerRun","timeFirstRun","time","value","setState","e","target","converTime","setInterval","clearInterval","pause","play","styleInput","width","react_default","a","createElement","className","class","type","ref","placeholder","onBlur","setTaskValue","id","onClick","onClickTask","style","pattern","onInput","setTaskTime","setBreakTime","es","text","percent","trailWidth","strokeWidth","strokeLinecap","trailColor","strokeColor","fill","fontSize","onClickTimer","react_fontawesome_index_es","color","icon","current","focus","Component","Boolean","window","location","hostname","match","startApp","ReactDOM","render","src_App_0","document","getElementById","cordova","addEventListener","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4490235.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport \"react-bulma-components/full\";\r\nimport mp3_file from './music/sounds_of_city.mp3';\r\nimport { Line, Circle } from 'rc-progress';\r\nimport { faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\nlibrary.add(\r\n  faPlay,\r\n  faPause,\r\n);\r\n\r\nconst placeholders = [\"Study time\", \"Break time\"];\r\n\r\nconst defaultTask = \"Studying\";\r\n\r\nconst headerTaskTimer = \"Work time.\"\r\nconst headerBreakTimer = \"Break time.\"\r\n\r\nconst defaultTaskTime = 25;\r\nconst defaultBreakTime = 5;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.taskInputRef = React.createRef();\r\n    this.countdownEvent = this.countdownEvent.bind(this);\r\n    this.timer = 0;\r\n\r\n    this.state = \r\n    {\r\n      taskEdit: false,\r\n      taskValue: defaultTask,\r\n      timerTypeValue: headerTaskTimer,\r\n      timeToPercent: '',\r\n\r\n      playAlarm: false,\r\n      alarm: new Audio(mp3_file),\r\n\r\n      taskTime: defaultTaskTime,\r\n      breakTime: defaultBreakTime,\r\n      countdownTime: defaultTaskTime * 60,\r\n      timerSwitch: false,\r\n      timerRun: false,\r\n      timeFirstRun: true,\r\n    };\r\n  }\r\n\r\n  converTime(time) {\r\n    //Minutes to seconds in this case.\r\n    let value = time * 60;\r\n    this.setState({ countdownTime: value });\r\n  }\r\n\r\n  //Setters\r\n  setTaskTime(e) {\r\n    this.setState({ taskTime: e.target.value });\r\n    if (!this.state.timerSwitch) {\r\n      this.converTime(e.target.value);\r\n    }\r\n      \r\n  }\r\n\r\n  setBreakTime(e) {\r\n    this.setState({ breakTime: e.target.value });\r\n    if (this.state.timerSwitch) {\r\n      this.converTime(e.target.value);\r\n    }\r\n  }\r\n\r\n  setTaskValue(e) {\r\n    this.setState({ taskEdit: false });\r\n    if (e.target.value !== \"\") {\r\n      this.setState({ taskValue: e.target.value });\r\n    }\r\n  }\r\n\r\n  ///Events\r\n\r\n  //Enables the editing of the task when clicking the written word.\r\n  onClickTask() { this.setState({ taskEdit: true }); }\r\n\r\n  //The button that toggles the timer.\r\n  onClickTimer() {\r\n    //When the Start button is clicked, it runs the timer.\r\n    if (this.state.timerRun === false) {\r\n      this.setState({ timerRun: true });\r\n      this.timer = setInterval(this.countdownEvent, 1000);\r\n    }\r\n    //When the Stop button is clicked, it stops the sound.\r\n    else {\r\n      this.setState({ timerRun: false });\r\n      clearInterval(this.timer);\r\n\r\n      if (this.state.playAlarm) {\r\n        this.state.alarm.pause();\r\n        this.setState({ alarm: new Audio(mp3_file) });\r\n      }\r\n    }\r\n\r\n    //If the timer is switched (when you switch from work to break or opposite),\r\n    //the new timer is asigned with the new header.\r\n    if (this.state.timerSwitch) {\r\n      this.setState({ timerTypeValue: headerBreakTimer });     \r\n      if (this.state.countdownTime === 0)\r\n        this.converTime(this.state.breakTime);\r\n    }\r\n    else {\r\n      this.setState({ timerTypeValue: headerTaskTimer });     \r\n      if (this.state.countdownTime === 0)\r\n        this.converTime(this.state.taskTime);\r\n    } \r\n  }  \r\n\r\n  countdownEvent() {\r\n    //All negative values forces the countdown to 0.\r\n    if (this.state.countdownTime > 0) \r\n      this.setState({ countdownTime : this.state.countdownTime - 1 });\r\n    else\r\n      this.setState({ countdownTime : 0 });\r\n\r\n    //When the timer is over, switches to the other one and triggers the sound.\r\n    if (this.state.countdownTime === 0) { \r\n      clearInterval(this.timer);     \r\n      this.setState({ playAlarm: true });\r\n      this.state.alarm.play();\r\n\r\n      if (this.state.timerSwitch) {\r\n        this.setState({ timerSwitch: false });\r\n      }\r\n      else {\r\n        this.setState({ timerSwitch: true });\r\n      }\r\n\r\n      this.setState({ timerTypeValue: \"It's over!\" });\r\n    }\r\n  }\r\n\r\n  //App render\r\n  render() {\r\n    let styleInput = {\r\n      width: 100\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\t\t    <header className=\"App-header\">\r\n\r\n          <h1 class=\"title has-text-white\">\r\n            Pomodoro with React and Cordava\r\n          </h1>\r\n\r\n          <div class=\"task\">\r\n            {\r\n              (!this.state.taskEdit) \r\n              ? \r\n                <p \r\n                  id=\"taskName\" \r\n                  onClick={ this.onClickTask.bind(this) } \r\n                  class=\"taskName\">{ this.state.taskValue } \r\n                </p>\r\n              :\r\n                <input \r\n                  class=\"input\" \r\n                  type=\"text\" \r\n                  ref={ this.taskInputRef } \r\n                  placeholder={ this.state.taskValue } \r\n                  onBlur={this.setTaskValue.bind(this)}\r\n                />\r\n            }\r\n            <p class=\"popup help\">Click in to change the task and click out to save.</p>\r\n          </div>\r\n\r\n\r\n          <div class=\"container\">\r\n            <div class=\"columns is-mobile\">\r\n              <div class=\"field column\">\r\n                <div class=\"control\">\r\n                  <p>{ this.state.taskValue }</p>\r\n                  <input\r\n                    style={ styleInput }\r\n                    class=\"input\" \r\n                    type=\"number\" \r\n                    pattern=\"[0-9]*\" \r\n                    value={ this.state.taskTime }\r\n                    placeholder={ placeholders[0] } \r\n                    onInput={this.setTaskTime.bind(this)}\r\n                  />\r\n                  <p class=\"popup help\">Enter { this.state.taskValue } time in minutes.</p>\r\n                </div>\r\n              </div> \r\n\r\n              <div class=\"field column\">\r\n                <div class=\"control\">\r\n                  <p>Break</p>\r\n                  <input\r\n                    style={ styleInput }\r\n                    class=\"input\" \r\n                    type=\"number\" \r\n                    pattern=\"[0-9]*\"  \r\n                    value={ this.state.breakTime }\r\n                    placeholder={ placeholders[1] }\r\n                    onInput={this.setBreakTime.bind(this)}\r\n                  />\r\n                  <p class=\"popup help\">Enter break time in minutes.</p>\r\n                </div>               \r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"container\">\r\n            <p>{ this.state.timerTypeValue }</p>\r\n            <p id=\"timer\">{ this.state.countdownTime }</p>\r\n            \r\n            <div id=\"circleWrapper\">\r\n              <Circle \r\n                text={ \"test\" }\r\n                class=\"circle\" \r\n                percent={ \r\n                  (this.state.timerSwitch) \r\n                  ?\r\n                  ((this.state.countdownTime / (this.state.breakTime * 60)) * 100)\r\n                  :\r\n                  ((this.state.countdownTime / (this.state.taskTime * 60)) * 100)\r\n                } \r\n                trailWidth=\"2\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"square\" \r\n                trailColor=\"#b21c1f\"\r\n                strokeColor=\"#fff\" \r\n                style={{\r\n                  text: { fill: '#f88', fontSize: '16px' },\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            {/* The user can't leave a timer empty. */}\r\n            {\r\n            (this.state.taskTime !== \"\" && this.state.breakTime !== \"\") \r\n            ?\r\n              <div id=\"buttonWrapper\">\r\n                <button \r\n                  id=\"timerRun\" \r\n                  onClick={ this.onClickTimer.bind(this) }  \r\n                  class=\"timerToggler\">\r\n                  <FontAwesomeIcon color=\"#ed4338\" icon={!this.state.timerRun ? faPlay : faPause} />\r\n                </button>   \r\n              </div>\r\n            :\r\n              <div id=\"buttonWrapper\"></div>\r\n            }\r\n            <p class=\"popup help\">Don't forget to enter a task and break time above, in minutes.</p>\r\n          </div>\r\n\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  //Components\r\n  componentDidMount () {\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    //Focus the mouse directly in the task input.\r\n    if (this.state.taskEdit && this.taskInputRef.current != null) \r\n      this.taskInputRef.current.focus();\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst startApp = () => {\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n}\r\n\r\nif(!window.cordova) {\r\n  startApp()\r\n} else {\r\n  document.addEventListener('deviceready', startApp, false)\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/sounds_of_city.6e0dcab5.mp3\";"],"sourceRoot":""}